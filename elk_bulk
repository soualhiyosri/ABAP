*&---------------------------------------------------------------------*
*& Report  Z_BULK7
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT Z_BULK7.
DATA: LV_JSON    TYPE /UI2/CL_JSON=>JSON,
      LR_DATA    TYPE REF TO DATA,
      LV_STRING1 TYPE STRING.
DATA : LV_TIMSTAMP TYPE STRING.
DATA : LV_PAYLOAD TYPE STRING.
DATA: LV_IOBJNM_STR  TYPE STRING.
DATA: LV_RANGE_VALUES  TYPE STRING.
DATA: LV_RANGE_VALUES1  TYPE STRING.

DATA LT_FILTERS TYPE TABLE OF STRING.
DATA LT_FILTERS2 TYPE TABLE OF STRING.
DATA LT_FILTERS3 TYPE TABLE OF STRING.
DATA LT_FILTERS4 TYPE TABLE OF STRING.
DATA LT_FILTERS5 TYPE TABLE OF STRING.
DATA LT_FILTERS6 TYPE TABLE OF STRING.

DATA: LS_FILTERSS  TYPE STRING.
DATA: LS_FILTERSS1  TYPE STRING.
DATA: LS_FILTERSS2  TYPE STRING.

*LOOP AT LT_FILTERS INTO LS_FILTERSS.
*SPLIT LS_FILTERSS AT '":"' INTO LV_IOBJNM_STR LV_RANGE_VALUES.

DATA LT_SERIES_ROW1 TYPE TABLE OF  ZCONFF.
DATA LS_SERIES1 TYPE ZCONFF.
DATA IT1 TYPE ZCONFF.
DATA J TYPE I.



DATA LS_SERIES2 TYPE ZMAPPING.
DATA LT_SERIES2 TYPE TABLE OF ZMAPPING.
DATA IT TYPE STRING.

DATA : LV_PAYLOAD1 TYPE STRING.
DATA : LV_PAYLODA2 TYPE STRING.
DATA LV_PAYLOAD01 TYPE STRING.
DATA PINDEX TYPE STRING.
DATA LV_PAYLOAD02 TYPE STRING.
TYPES: BEGIN OF Z_LS_SERIES_ROW,
         VALUES TYPE STRING,
       END OF Z_LS_SERIES_ROW.
TYPES: BEGIN OF Z_LS_SERIESF,
         FIELDNAME TYPE STRING,
       END OF Z_LS_SERIESF.
TYPES: Z_LT_SERIESF TYPE TABLE OF Z_LS_SERIESF.
DATA Z_LS_SERIESF TYPE Z_LS_SERIESF.
TYPES: Z_LT_SERIES_ROW TYPE TABLE OF Z_LS_SERIES_ROW.
DATA Z_LS_SERIES TYPE Z_LS_SERIES_ROW.
DATA Z_LT_SERIES TYPE Z_LT_SERIES_ROW.
DATA Z_IT_EKPO TYPE STANDARD TABLE OF Z_LS_SERIES_ROW.
DATA  LT_SERIES_ROW4 TYPE TABLE OF Z_LS_SERIES_ROW.

DATA: LV_TIMESTAMP     TYPE TIMESTAMPL,
      LV_FIX           TYPE TIMESTAMPL,
      LV_RES           TYPE I,
      RV_LAST_MODIFIED TYPE TIMESTAMPL,
      RV_LV            TYPE TIMESTAMPL,
      LV_LAST          TYPE TIMESTAMPL.
FIELD-SYMBOLS:
            <LS_DATA> TYPE ANY.

DATA LS_SERIES TYPE ZCONFF.
FIELD-SYMBOLS:
  <GT_DATA> TYPE TABLE,
  <DATA>    TYPE ANY,
  <DATA2>   TYPE DATA,
  <STRUCT>  TYPE ANY,
  <FIELD>   TYPE ANY.


DATA:
  RV_DETAIL      TYPE STRING,
  LO_HTTP_CLIENT TYPE REF TO IF_HTTP_CLIENT,
  LV_STATUS      TYPE I,
  LT_FIELDS      TYPE TIHTTPNVP,
  LV_SYSUBRC     TYPE SYSUBRC.

DATA LT_SERIES_ROW TYPE TABLE OF /IWFND/SU_STATS.

DATA:  HTTP_CLIENT TYPE REF TO IF_HTTP_CLIENT,

       HTTP_URL    TYPE STRING,
       P_CONTENT   TYPE STRING,
       P_CONTENT2  TYPE STRING.

DATA : GV_JSON TYPE STRING.
DATA: GD_TABIX TYPE SY-TABIX.
DATA LV_PAY3 TYPE STRING.
DATA HELLOWORLD TYPE STRING.
DATA UV_PAYLOAD TYPE STRING.
DATA GV_CODE TYPE INTEGER.
DATA GV_REASON TYPE STRING.
DATA S TYPE STRING.
DATA SHOULD TYPE STRING.

DATA LV_PAYLOAD2 TYPE STRING.
DATA LF TYPE C LENGTH 1.

LF =  |\n|.

TYPES: BEGIN OF LS_SERIES_ROW,
         INDEX TYPE STRING,
       END OF LS_SERIES_ROW.

TYPES:
  BEGIN OF TY_STRU,
    ID_TOKEN  TYPE STRING,
    ID_TOKEN1 TYPE STRING,
    ID_TOKEN2 TYPE STRING,
    ID_TOKEN3 TYPE STRING,
    ID_TOKEN4 TYPE STRING,
  END OF TY_STRU.

DATA URLL TYPE STRING.
DATA PTABLE TYPE STRING.
PARAMETERS   P_BARRY(10)    TYPE C.


DATA AINDEX TYPE STRING .
AINDEX = SY-DATUM.
WRITE :/ AINDEX.
DATA LT_SERIES_ROW7 TYPE TABLE OF  ZCONFF.

DATA LS_SERIES7 TYPE ZCONFF.
SELECT * FROM ZCONFF INTO LS_SERIES7 WHERE IDCONF = P_BARRY .
  PTABLE =  LS_SERIES7-TABLENAME.
  PINDEX =  LS_SERIES7-INDEXNAME && 'focusyosri'.
ENDSELECT.

DATA:
  LO_DYNAMIC_TABLE TYPE REF TO DATA,
  LO_DYNAMIC_LINE  TYPE REF TO DATA.

FIELD-SYMBOLS:  <LT_TABLE_STRUCTURE> TYPE TABLE,
                <LS_TABLE_STRUCTURE> TYPE ANY.

CREATE DATA LO_DYNAMIC_TABLE TYPE STANDARD TABLE OF (PTABLE).
ASSIGN LO_DYNAMIC_TABLE->* TO <LT_TABLE_STRUCTURE>.

CREATE DATA LO_DYNAMIC_LINE LIKE LINE OF <LT_TABLE_STRUCTURE>.
ASSIGN LO_DYNAMIC_LINE->* TO <LS_TABLE_STRUCTURE>.
*DATA lt_table TYPE STANDARD TABLE OF <lt_table_structure>.


DATA LV_OLD_LINE TYPE STRING.
DATA LV_UPDATE_LINE TYPE STRING.
DATA LV_NEW_LAST_LINE TYPE STRING.



"bech t7seb les lignes de tableau
SELECT COUNT( * )
    INTO LV_NEW_LAST_LINE
    FROM (PTABLE).
DATA LS_VBAK TYPE ZCONFF.
" ta5ou el timstamp el tsajelt e5er wa7da fil  table
SELECT SINGLE TIMSTAMPLL
 FROM ZCONFF
 INTO LV_TIMESTAMP
 WHERE IDCONF = P_BARRY.


"UPDATE ZCONFF SET TIMSTAMPLL = LS_VBAK-TIMSTAMPLL WHERE IDCONF = P_BARRY.
"LV_OLD_LINE = LS_VBAK-TIMSTAMPL.
"LV_UPDATE_LINE = LV_NEW_LAST_LINE - LV_OLD_LINE.

"UPDATE ZCONFF SET TIMSTAMPL = LV_NEW_LAST_LINE WHERE IDCONF = P_BARRY.
"BREAK-POINT.
"SELECT * FROM (PTABLE) INTO TABLE <LT_TABLE_STRUCTURE> UP TO 10 ROWS.
SELECT * FROM (PTABLE) INTO TABLE <LT_TABLE_STRUCTURE>.


"SELECT * FROM (PTABLE) INTO TABLE <LT_TABLE_STRUCTURE>.
"IF LV_OLD_LINE = 0.
LOOP AT <LT_TABLE_STRUCTURE> INTO <LS_TABLE_STRUCTURE>.
  GD_TABIX = SY-TABIX.

  LV_JSON = /UI2/CL_JSON=>SERIALIZE( DATA = <LS_TABLE_STRUCTURE>  COMPRESS = ABAP_TRUE PRETTY_NAME = /UI2/CL_JSON=>PRETTY_MODE-CAMEL_CASE ).
*  WRITE:/ LV_JSON.
  Z_LS_SERIES-VALUES = LV_JSON.
  IF Z_LS_SERIES-VALUES NE ''.

    SPLIT Z_LS_SERIES-VALUES AT ',"' INTO TABLE LT_FILTERS.

    SELECT * FROM ZMAPPING INTO LS_SERIES2 WHERE IDCONF = P_BARRY .
      TRANSLATE LS_SERIES2-FIELDNAME TO LOWER CASE.
*loop at LT_FILTERS into LS_FILTERSS.
*  WRITE :/ LS_FILTERSS.
*  ENDLOOP.
      TRANSLATE Z_LS_SERIES-VALUES TO LOWER CASE.

      IT = '"' && LS_SERIES2-FIELDNAME && '"'.
      REPLACE ALL OCCURRENCES OF '_' IN IT WITH ''.

      REPLACE ALL OCCURRENCES OF IT IN Z_LS_SERIES-VALUES  WITH '"' && LS_SERIES2-FIELDNAME && '__' && LS_SERIES2-ROLE && '"'.


      IF LS_SERIES2-ROLE = 'T'.

        LV_TIMSTAMP = LS_SERIES2-FIELDNAME && '__' && LS_SERIES2-ROLE.
        TRANSLATE LV_TIMSTAMP TO LOWER CASE.

      ENDIF.
    ENDSELECT.


    APPEND Z_LS_SERIES TO  LT_SERIES_ROW4.

    SORT LT_SERIES_ROW4 BY VALUES.
  ENDIF.
ENDLOOP.

"ELSE.
"LOOP AT <LT_TABLE_STRUCTURE> INTO <LS_TABLE_STRUCTURE>.
"GD_TABIX = SY-TABIX.
"IF GD_TABIX > LV_OLD_LINE .

DATA LV_TIMEZONE TYPE STRING .
DATA LV_F TYPE STRING.
"LOOP AT LT_SERIES_ROW4 INTO Z_LS_SERIES.
DATA  LV_NVALUE TYPE STRING.
DATA  LV_VALUE TYPE STRING.
"LV_NVALUE =   Z_LS_SERIES-VALUES.
"APPEND  LV_NVALUE TO LT_FILTERS6.
"ENDLOOP.
LOOP AT LT_SERIES_ROW4 INTO Z_LS_SERIES.
  LR_DATA = /UI2/CL_JSON=>GENERATE( JSON = Z_LS_SERIES-VALUES ).

  TYPES :  BEGIN OF TS_STR,
             TIMESTAMPL__T TYPE STRING,
           END OF TS_STR .


  DATA LV_STM TYPE TIMESTAMPL.

  DATA LS_STR TYPE TS_STR.
  /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = Z_LS_SERIES-VALUES  CHANGING DATA = LS_STR ).
  DATA LV_AUX TYPE STRING .
  LV_AUX = LS_STR-TIMESTAMPL__T.
  " write :/ ls_str-TIMESTAMPL__T.
  IF LR_DATA IS BOUND.
    ASSIGN LR_DATA->* TO <DATA>.
    ASSIGN COMPONENT LV_TIMSTAMP OF STRUCTURE <DATA> TO <STRUCT>.
    IF <STRUCT> IS ASSIGNED.
      LR_DATA = <STRUCT>.
      ASSIGN LR_DATA->* TO <DATA>.
      LV_VALUE = <DATA> .
      "UPDATE ZCONFF SET TIMSTAMPLL = LV_VALUE WHERE IDCONF = P_BARRY.
      LV_F = LV_VALUE.

      REPLACE ALL OCCURRENCES OF '.' IN LV_VALUE  WITH '' .
      "2019-04-13T00:00:00"
      DATA LV_TIMEZONEI TYPE I.
      DATA LV_TIMEZONES TYPE STRING.

      LV_STM = CONV #( LV_AUX )  .

      IF LV_TIMESTAMP EQ '00000000'.
        LV_TIMESTAMP = LV_STM.

      ENDIF.
      "CALL METHOD CL_ABAP_TSTMP=>COMPARE
      "EXPORTING
      "TSTMP1 = LV_TIMESTAMP
      "TSTMP2 = LV_STM
      "RECEIVING
      "COMP   = LV_RES.

      "IF LV_RES = -1.
      RV_LV = LV_STM.
      "na3ml concatination mta3 timstamp
      LV_TIMEZONE = LV_VALUE(4) && '-' && LV_VALUE+4(2) && '-' && LV_VALUE+6(2) && 'T' && LV_VALUE+8(2) && ':' && LV_VALUE+10(2) && ':' && LV_VALUE+12(2).
      "LV_TIMEZONES = LV_VALUE(4) && LV_VALUE+4(2) && LV_VALUE+6(2) && LV_VALUE+8(2) && LV_VALUE+10(2) && LV_VALUE+12(2).
      "LV_TIMEZONEI = LV_TIMEZONES.
      LV_NVALUE =  Z_LS_SERIES-VALUES.
      "BREAK-POINT.
      REPLACE ALL OCCURRENCES OF LS_STR-TIMESTAMPL__T IN LV_NVALUE   WITH '"' && LV_TIMEZONE && '"' .

      WRITE:/ LV_NVALUE .
      APPEND  LV_NVALUE TO LT_FILTERS6.
      "BREAK-POINT.
      "ENDIF.

      "ELSEIF LV_RES = 1.
      "RV_LV = LV_TIMESTAMP.
      "ELSE.
      "RV_LV = LV_STM.
      "na3ml concatination mta3 timstamp
      "LV_TIMEZONE = LV_VALUE(4) && '-' && LV_VALUE+4(2) && '-' && LV_VALUE+6(2) && 'T' && LV_VALUE+8(2) && ':' && LV_VALUE+10(2) && ':' && LV_VALUE+12(2).
      "LV_TIMEZONES = LV_VALUE(4) && LV_VALUE+4(2) && LV_VALUE+6(2) && LV_VALUE+8(2) && LV_VALUE+10(2) && LV_VALUE+12(2).
      "LV_TIMEZONEI = LV_TIMEZONES.
      "LV_NVALUE =  Z_LS_SERIES-VALUES.
      "BREAK-POINT.
      "REPLACE ALL OCCURRENCES OF LS_STR-TIMESTAMPL__T IN LV_NVALUE   WITH '"' && LV_TIMEZONE && '"' .

      "WRITE:/ LV_NVALUE .
      "APPEND  LV_NVALUE TO LT_FILTERS6.
      "BREAK-POINT.
    ENDIF.





*  data ligmne type I .
*  DESCRIBE TABLE LT_FILTERS6 LINES ligmne.

    " if  ligmne <> 0 .
    " LOOP AT LT_SERIES_ROW4 INTO Z_LS_SERIES.
    "   LR_DATA = /UI2/CL_JSON=>GENERATE( JSON = Z_LS_SERIES-VALUES ).

    "   TYPES :  BEGIN OF TS_STRR,
    "             TIMESTAMPL__TT TYPE TIMESTAMPL,
    "           END OF TS_STRR .
    "  DATA LV_TIMESTAMPL__T TYPE TIMESTAMPL.
    "  DATA LS_STRR TYPE TS_STR.
    "  /UI2/CL_JSON=>DESERIALIZE( EXPORTING JSON = Z_LS_SERIES-VALUES  CHANGING DATA = LS_STRR ).
    " write :/ ls_str-TIMESTAMPL__T.

    "  IF LR_DATA IS BOUND.
    "    ASSIGN LR_DATA->* TO <DATA>.
    "    ASSIGN COMPONENT LV_TIMSTAMP OF STRUCTURE <DATA> TO <STRUCT>.
    "    IF <STRUCT> IS ASSIGNED.
    "      LR_DATA = <STRUCT>.
    "      ASSIGN LR_DATA->* TO <DATA>.
    "timstam jdida
    "      LV_TIMESTAMPL__T = <DATA> .

    "        IF LV_TIMESTAMP EQ '00000000'.
    "         UPDATE ZCONFF SET TIMSTAMPLL = LV_TIMESTAMPL__T WHERE IDCONF = P_BARRY.

    "       ELSE.
    "BREAK-POINT.




    "         CALL METHOD CL_ABAP_TSTMP=>COMPARE
    "           EXPORTING
    "             TSTMP1 = LV_TIMESTAMP
    "             TSTMP2 = LV_TIMESTAMPL__T
    "           RECEIVING
    "             COMP   = LV_RES.

    "          IF LV_RES = -1.
    "           RV_LAST_MODIFIED = LV_TIMESTAMPL__T.
    "         ELSEIF LV_RES = 1.
    "           RV_LAST_MODIFIED = LV_TIMESTAMP.
    "         ELSE.
    "           RV_LAST_MODIFIED = LV_TIMESTAMPL__T.

  ENDIF.
ENDLOOP.

  "       ENDIF.
  "UPDATE ZCONFF SET TIMSTAMPL = LV_F WHERE IDCONF = P_BARRY.

  "     ENDIF.
  "   ENDIF.
  "  LV_FIX = RV_LAST_MODIFIED.
  "LV_TIMESTAMP = LV_FIX.

  "INSERT INTO ZCONFF VALUES
  LS_SERIES-IDCONF = P_BARRY.
  "    LS_SERIES-TIMSTAMPLL = LV_FIX.
* INSERT INTO   ZCONFF  VALUES LS_SERIES.
  "UPDATE ZCONFF SET TIMSTAMPLL = RV_LAST_MODIFIED WHERE IDCONF = P_BARRY.
  "  CLEAR RV_LAST_MODIFIED.
  " ENDLOOP.
  "UPDATE ZCONFF SET TIMSTAMPLL = LV_FIX WHERE IDCONF = P_BARRY.
  "endif.
  LV_PAYLOAD01 = '{ "index": {"_index" : "'.
  TRANSLATE PINDEX TO LOWER CASE.
  LV_PAYLOAD02 = '"} }'.
  LV_PAYLOAD = LV_PAYLOAD01 && PINDEX && LV_PAYLOAD02.
  HELLOWORLD = ''.
  DATA LV_PAYLOAD12 TYPE STRING.
  CLEAR LV_NVALUE.
  LOOP AT LT_FILTERS6 INTO LV_NVALUE.
*       WRITE: /  Z_LS_SERIES-VALUES.
    LV_PAYLOAD12 =  LV_PAYLOAD && LF && LV_NVALUE && LF .
    HELLOWORLD = HELLOWORLD && LF && LV_PAYLOAD12 && LF .

  ENDLOOP.



  DATA: GV_REQUEST TYPE REF TO IF_HTTP_REQUEST.
  DATA: GV_RESPONSE TYPE REF TO IF_HTTP_RESPONSE.
  DATA: LV_HTTP_ERROR_DESCR      TYPE STRING,
        LV_HTTP_ERROR_DESCR_LONG TYPE XSTRING.
  DATA: LV_HTTP_RETURN_CODE  TYPE I.




  DATA: HTTP_DEST TYPE RFCDEST VALUE 'ZTEST_HTTP'.
  CL_HTTP_CLIENT=>CREATE_BY_DESTINATION( EXPORTING
  DESTINATION = HTTP_DEST IMPORTING CLIENT = LO_HTTP_CLIENT ).




  CALL METHOD CL_HTTP_UTILITY=>SET_REQUEST_URI
    EXPORTING
      REQUEST = LO_HTTP_CLIENT->REQUEST
      URI     = |/_doc/_bulk |.



* Set up the HTTP Post
  CALL METHOD LO_HTTP_CLIENT->REQUEST->SET_METHOD
    EXPORTING
      METHOD = 'POST'.

  CALL METHOD LO_HTTP_CLIENT->REQUEST->SET_VERSION
    EXPORTING
      VERSION = IF_HTTP_REQUEST=>CO_PROTOCOL_VERSION_1_0.   " 1.0


  LO_HTTP_CLIENT->REQUEST->SET_HEADER_FIELD(
  NAME = 'Content-Type'
  VALUE = 'application/json'
  ).

  CALL METHOD LO_HTTP_CLIENT->REQUEST->IF_HTTP_ENTITY~SET_CDATA
    EXPORTING
      DATA   = HELLOWORLD
      OFFSET = 0.

* Send the HTTP Post
  CALL METHOD LO_HTTP_CLIENT->SEND
    EXPORTING
      TIMEOUT                    = 15   " 15 Seconds
    EXCEPTIONS
      HTTP_COMMUNICATION_FAILURE = 1
      HTTP_INVALID_STATE         = 2.


*Read the Response
  CALL METHOD LO_HTTP_CLIENT->RECEIVE
    EXCEPTIONS
      HTTP_COMMUNICATION_FAILURE = 1
      HTTP_INVALID_STATE         = 2
      HTTP_PROCESSING_FAILED     = 3.

* Get the HTTP return code from the HTTP POST:
  LO_HTTP_CLIENT->RESPONSE->GET_STATUS( IMPORTING CODE   = LV_HTTP_RETURN_CODE ).
  LO_HTTP_CLIENT->RESPONSE->GET_STATUS( IMPORTING REASON = LV_HTTP_ERROR_DESCR ).

  LV_HTTP_ERROR_DESCR_LONG = LO_HTTP_CLIENT->RESPONSE->GET_RAW_MESSAGE( ).
* Write the HTTP Return Code / Description to the screen:
  WRITE:/ 'HTTP return Code/Description:',  LV_HTTP_RETURN_CODE NO-GAP, '/' NO-GAP, LV_HTTP_ERROR_DESCR.
  SKIP 1.

  SKIP 1.

* Refresh the Request after each POST:
  CALL METHOD LO_HTTP_CLIENT->REFRESH_REQUEST(
    EXCEPTIONS
      HTTP_ACTION_FAILED = 1
      OTHERS             = 2 ).

  P_CONTENT = LO_HTTP_CLIENT->RESPONSE->GET_CDATA( ).
  "BREAK-POINT.
  CLEAR LV_PAYLOAD.
  CLEAR LV_PAYLOAD1.
  CLEAR HELLOWORLD.
