class CL_CSI_FILESTORE_OBJECT_AWS definition
  public
  inheriting from CL_CSI_FILESTORE_OBJECT
  abstract
  create public .

public section.
*"* public components of class CL_CSI_FILESTORE_OBJECT_AWS
*"* do not include other source files here!!!
  type-pools CSIAW .

  class-methods GET_BUCKET_REGION_FOR_ACCOUNT
    importing
      !IV_BUCKET type STRING
      !IO_ACCOUNT type ref to CL_CSI_PROVIDER_ACCOUNT_AWS
      !IV_HTTP_DESTINATION type RFCDEST
    returning
      value(RV_REGION) type CSI_AWS_REGION
    raising
      CX_CSI_FILESTORE .
protected section.

*"* protected components of class CL_CSI_FILESTORE_OBJECT_AWS
*"* do not include other source files here!!!
  constants MC_OK type CSI_INT value 200 ##NO_TEXT.
  constants MC_CONTENT_TYPE type CSI_STRING value 'content-type' ##NO_TEXT.
  constants MC_CONTENT_LENGTH type CSI_STRING value 'content-length' ##NO_TEXT.
  constants MC_CONTENT_RANGE type CSI_STRING value 'content-range' ##NO_TEXT.
  constants MC_ETAG type CSI_STRING value 'etag' ##NO_TEXT.
  constants MC_X_AMZ_COPY_SOURCE type CSI_STRING value 'x-amz-copy-source' ##NO_TEXT.
  constants MC_PARTIAL_CONTENT type CSI_INT value 206 ##NO_TEXT.
  data MV_QUERY_TYPE type CSI_SERVICE_QUERYTYPE value IF_CSI_SERVICE_C=>QUERYTYPE_REST ##NO_TEXT.
  constants MC_API_VERSION type CSI_STRING value '2006-03-01' ##NO_TEXT.
  constants MC_LAST_MODIFIED type CSI_STRING value 'last-modified' ##NO_TEXT.
  constants MC_DIRECTORY_PREFIX type CSI_STRING value 'prefix' ##NO_TEXT.
  constants MC_DIRECTORY_DELIMITER type CSI_STRING value 'delimiter' ##NO_TEXT.
  class-data ST_BUCKET_REGION_BUFFER type CSIT_AWS_BUCKET_REGION .

  methods GET_PROVIDER
    returning
      value(RO_PROVIDER) type ref to CL_CSI_PROVIDER_AWS .
  methods GET_ACCOUNT
    returning
      value(RO_ACCOUNT) type ref to CL_CSI_PROVIDER_ACCOUNT_AWS .
  methods INTERNAL_GET
    importing
      !IV_URI type STRING optional
      !IV_BUCKET type STRING optional
      !IV_RAISE_EXCEPTION type CSI_BOOL default ABAP_TRUE
    exporting
      !EV_CODE type INT4
      !EV_REASON type STRING
      !EV_CDATA type STRING
      !EV_DATA type XSTRING
    raising
      CX_CSI_FILESTORE .
  methods INTERNAL_PUT
    importing
      !IV_URL type CSI_STRING
      !IT_FILE_DATA type CSIT_FILESTORE_FILEDATA optional
      !IT_ADDITIONAL_HEADER type TIHTTPNVP optional
      !IV_CONTENT_TYPE type CSI_STRING optional
      !IV_BUCKET type STRING optional
      !IV_RAISE_EXCEPTION type CSI_BOOL default ABAP_TRUE
    returning
      value(RV_ID) type CSI_STRING
    raising
      CX_CSI_FILESTORE .
  methods INTERNAL_DELETE
    importing
      !IV_URL type CSI_STRING
      !IV_BUCKET type STRING optional
      !IV_RAISE_EXCEPTION type CSI_BOOL default ABAP_TRUE
    raising
      CX_CSI_FILESTORE .
  methods GET_BUCKET_REGION
    importing
      !IV_BUCKET type STRING
    returning
      value(RV_REGION) type CSI_AWS_REGION
    raising
      CX_CSI_FILESTORE .

  methods INNER_GET_QUERY_TYPE
    final redefinition .
  methods INNER_SET_QUERY_TYPE
    final redefinition .
private section.
*"* private components of class CL_CSI_FILESTORE_OBJECT_AWS
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_CSI_FILESTORE_OBJECT_AWS IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->GET_ACCOUNT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_ACCOUNT                     TYPE REF TO CL_CSI_PROVIDER_ACCOUNT_AWS
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD GET_ACCOUNT.
  ro_account ?= go_filestore->go_provider->get_active_account( ).
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->GET_BUCKET_REGION
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_BUCKET                      TYPE        STRING
* | [<-()] RV_REGION                      TYPE        CSI_AWS_REGION
* | [!CX!] CX_CSI_FILESTORE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_bucket_region.
    DATA:
      lv_dest type rfcdest,
      lo_account type ref to cl_csi_provider_account_aws.

    lv_dest = get_provider( )->get_file_destination( ).
    lo_account = get_account( ).
    rv_region = get_bucket_region_for_account( iv_bucket = iv_bucket io_account = lo_account iv_http_destination = lv_dest ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method CL_CSI_FILESTORE_OBJECT_AWS=>GET_BUCKET_REGION_FOR_ACCOUNT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_BUCKET                      TYPE        STRING
* | [--->] IO_ACCOUNT                     TYPE REF TO CL_CSI_PROVIDER_ACCOUNT_AWS
* | [--->] IV_HTTP_DESTINATION            TYPE        RFCDEST
* | [<-()] RV_REGION                      TYPE        CSI_AWS_REGION
* | [!CX!] CX_CSI_FILESTORE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD GET_BUCKET_REGION_FOR_ACCOUNT.
    csiaw_mcx_define.
    DATA:
      lv_timestamp     TYPE timestamp,
      lt_resp_headers  TYPE tihttpnvp,
      lv_code          TYPE i,
      ls_bucket_region TYPE csis_aws_bucket_region.
    FIELD-SYMBOLS:
      <ls_bucket_region> TYPE csis_aws_bucket_region,
      <ls_header>        TYPE ihttpnvp.
    CONSTANTS lc_method TYPE csi_string VALUE 'HEAD'.
    CONSTANTS lc_def_region TYPE csi_aws_region VALUE 'us-east-1'.
    GET TIME STAMP FIELD lv_timestamp.

    READ TABLE st_bucket_region_buffer ASSIGNING <ls_bucket_region> WITH TABLE KEY bucket = iv_bucket.
    IF ( <ls_bucket_region> IS ASSIGNED ).
      " sure, the buffer should be invalidated, but...
      rv_region = <ls_bucket_region>-region.
      RETURN.
    ENDIF.
    TRY.
        cl_csi_provider_aws_helper=>s3_do_rest_call(
          EXPORTING
            iv_uri              = '/'
            iv_method           = lc_method
            iv_timestamp        = lv_timestamp
            iv_http_destination = iv_http_destination
            io_account          = io_account
            iv_bucket           = iv_bucket
            iv_region           = lc_def_region
            iv_raise_exception  = abap_false
          IMPORTING
            ev_code             = lv_code
            et_response_header_fields = lt_resp_headers
        ).
        IF ( lv_code = mc_ok ).
          rv_region = lc_def_region.
        ELSE.
          READ TABLE lt_resp_headers ASSIGNING <ls_header> WITH TABLE KEY name = 'x-amz-bucket-region'.
          IF ( <ls_header> IS ASSIGNED ).
            rv_region = <ls_header>-value.
            ls_bucket_region-bucket = iv_bucket.
            ls_bucket_region-region = rv_region.
            INSERT ls_bucket_region INTO TABLE st_bucket_region_buffer.
          ENDIF.
        ENDIF.
        csiaw_mcx_convert_exception.
    ENDTRY.

    csiaw_mcx_raise.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->GET_PROVIDER
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_PROVIDER                    TYPE REF TO CL_CSI_PROVIDER_AWS
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD GET_PROVIDER.
  ro_provider ?= go_filestore->go_provider.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->INNER_GET_QUERY_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_QUERY_TYPE                  TYPE        CSI_SERVICE_QUERYTYPE
* +--------------------------------------------------------------------------------------</SIGNATURE>
method INNER_GET_QUERY_TYPE.
  rv_query_type = MV_QUERY_TYPE.
endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->INNER_SET_QUERY_TYPE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_QUERY_TYPE                  TYPE        CSI_SERVICE_QUERYTYPE (default =IF_CSI_SERVICE_C=>QUERYTYPE_REST)
* | [!CX!] CX_CSI_FILESTORE
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD inner_set_query_type.
  IF ( iv_query_type <> if_csi_service_c=>querytype_rest ).
    RAISE EXCEPTION TYPE cx_csi_filestore
      EXPORTING
        textid = cx_csi_filestore=>querytype_not_supported.
  ENDIF.
  mv_query_type = iv_query_type.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->INTERNAL_DELETE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_URL                         TYPE        CSI_STRING
* | [--->] IV_BUCKET                      TYPE        STRING(optional)
* | [--->] IV_RAISE_EXCEPTION             TYPE        CSI_BOOL (default =ABAP_TRUE)
* | [!CX!] CX_CSI_FILESTORE
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD internal_delete.
  csiaw_mcx_define.
  DATA:
    lv_timestamp TYPE xsddatetime_z.
*    lv_stringtosign TYPE string.
*
*  CASE iv_querytype.
*    WHEN if_csi_service_c=>querytype_soap.
*      " 1) create the webservice
*      DATA:
*        lo_s3_ws TYPE REF TO co_rcc_aws_amazon_s3.
*      CREATE OBJECT lo_s3_ws
*        EXPORTING
*          logical_port_name = iv_logicalportname.
*      " 2) create the bucket
*      DATA:
*        ls_s3_request  TYPE rcc_aws_delete_object_request,
*        ls_s3_response TYPE rcc_aws_delete_object_response.
*
*      ls_s3_request-awsaccess_key_id = iv_awskey.
*      ls_s3_request-bucket           = iv_bucket.
*      ls_s3_request-key              = iv_key.
*      GET TIME STAMP FIELD lv_timestamp.
*      ls_s3_request-timestamp = lv_timestamp.
*      lv_stringtosign = `AmazonS3` && `DeleteObject` && |{ lv_timestamp TIMESTAMP = ISO }| && `.000Z`.
*      ls_s3_request-signature = get_signature( iv_recordnumber = iv_recordnumber iv_stringtosign = lv_stringtosign ).
*      lo_s3_ws->delete_object(
*        EXPORTING
*          delete_object_request = ls_s3_request
*        IMPORTING
*          delete_object_response = ls_s3_response
*      ).
*    WHEN OTHERS.  " rest = default
  CONSTANTS:
    lc_method TYPE string VALUE 'DELETE'.
  DATA:
    lv_code   TYPE csi_int,
    lv_region TYPE csi_aws_region.
  lv_region = get_bucket_region( iv_bucket ).
  GET TIME STAMP FIELD lv_timestamp.
  TRY.
    cl_csi_provider_aws_helper=>s3_do_rest_call(
      EXPORTING
        iv_uri              = iv_url
        iv_method           = lc_method
        iv_timestamp        = lv_timestamp
        iv_http_destination = get_provider( )->get_file_destination( )
        io_account          = get_account( )
        iv_bucket           = iv_bucket
          iv_region           = lv_region
          iv_raise_exception  = iv_raise_exception
      IMPORTING
        ev_code = lv_code
    ).
    csiaw_mcx_convert_exception.
  ENDTRY.
*ENDCASE.
  IF ( lv_code <> 404 ).  "ignore "not found" exceptions
    csiaw_mcx_raise.
  ENDIF.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->INTERNAL_GET
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_URI                         TYPE        STRING(optional)
* | [--->] IV_BUCKET                      TYPE        STRING(optional)
* | [--->] IV_RAISE_EXCEPTION             TYPE        CSI_BOOL (default =ABAP_TRUE)
* | [<---] EV_CODE                        TYPE        INT4
* | [<---] EV_REASON                      TYPE        STRING
* | [<---] EV_CDATA                       TYPE        STRING
* | [<---] EV_DATA                        TYPE        XSTRING
* | [!CX!] CX_CSI_FILESTORE
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD internal_get.
  csiaw_mcx_define.
  DATA:
    lv_timestamp TYPE xsddatetime_z,
    lv_rel_url   TYPE csi_string,
    lv_region    TYPE csi_aws_region.
  CONSTANTS lc_method TYPE csi_string VALUE 'GET'.
  GET TIME STAMP FIELD lv_timestamp.
  lv_region = get_bucket_region( iv_bucket ).
  IF ( iv_uri IS SUPPLIED ).
    lv_rel_url = iv_uri.
  ELSE.
    lv_rel_url = gv_full_path.
  ENDIF.
  TRY.
    IF ( ev_data IS REQUESTED AND ev_cdata IS REQUESTED ).
      cl_csi_provider_aws_helper=>s3_do_rest_call(
        EXPORTING
          iv_uri              = lv_rel_url
          iv_method           = lc_method
          iv_timestamp        = lv_timestamp
          iv_http_destination = get_provider( )->get_file_destination( )
          io_account          = get_account( )
          iv_bucket           = iv_bucket
            iv_region           = lv_region
            iv_raise_exception  = iv_raise_exception
        IMPORTING
          ev_code             = ev_code
          ev_reason           = ev_reason
          ev_data             = ev_data
          ev_cdata            = ev_cdata
      ).
    ELSEIF ( ev_cdata IS REQUESTED ).
      cl_csi_provider_aws_helper=>s3_do_rest_call(
        EXPORTING
          iv_uri              = lv_rel_url
          iv_method           = lc_method
          iv_timestamp        = lv_timestamp
          iv_http_destination = get_provider( )->get_file_destination( )
          io_account          = get_account( )
          iv_bucket           = iv_bucket
            iv_region           = lv_region
            iv_raise_exception  = iv_raise_exception
        IMPORTING
          ev_code             = ev_code
          ev_reason           = ev_reason
          ev_cdata            = ev_cdata
      ).
    ELSEIF ( ev_data IS REQUESTED ).
      cl_csi_provider_aws_helper=>s3_do_rest_call(
        EXPORTING
          iv_uri              = lv_rel_url
          iv_method           = lc_method
          iv_timestamp        = lv_timestamp
          iv_http_destination = get_provider( )->get_file_destination( )
          io_account          = get_account( )
          iv_bucket           = iv_bucket
            iv_region           = lv_region
            iv_raise_exception  = iv_raise_exception
        IMPORTING
          ev_code             = ev_code
          ev_reason           = ev_reason
          ev_data             = ev_data
      ).
    ELSE.
      cl_csi_provider_aws_helper=>s3_do_rest_call(
        EXPORTING
          iv_uri              = lv_rel_url
          iv_method           = lc_method
          iv_timestamp        = lv_timestamp
          iv_http_destination = get_provider( )->get_file_destination( )
          io_account          = get_account( )
          iv_bucket           = iv_bucket
            iv_region           = lv_region
            iv_raise_exception  = iv_raise_exception
        IMPORTING
          ev_code             = ev_code
          ev_reason           = ev_reason
      ).
    ENDIF.
    csiaw_mcx_convert_exception.
  ENDTRY.
  csiaw_mcx_raise.
ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method CL_CSI_FILESTORE_OBJECT_AWS->INTERNAL_PUT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_URL                         TYPE        CSI_STRING
* | [--->] IT_FILE_DATA                   TYPE        CSIT_FILESTORE_FILEDATA(optional)
* | [--->] IT_ADDITIONAL_HEADER           TYPE        TIHTTPNVP(optional)
* | [--->] IV_CONTENT_TYPE                TYPE        CSI_STRING(optional)
* | [--->] IV_BUCKET                      TYPE        STRING(optional)
* | [--->] IV_RAISE_EXCEPTION             TYPE        CSI_BOOL (default =ABAP_TRUE)
* | [<-()] RV_ID                          TYPE        CSI_STRING
* | [!CX!] CX_CSI_FILESTORE
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD internal_put.
  csiaw_mcx_define.
  csiaw_header_define.
  DATA:
    lv_timestamp TYPE xsddatetime_z.
*        lv_stringtosign TYPE string.
  CASE mv_query_type.
    WHEN if_csi_service_c=>querytype_soap.
*      " 1) create the webservice
*      DATA:
*            lo_s3_ws TYPE REF TO co_rcc_aws_amazon_s3.
*      CREATE OBJECT lo_s3_ws
*        EXPORTING
*          logical_port_name = iv_logicalportname.
*      " 2) determine the file size
*      DATA:
*        lv_filesize TYPE abap_msize.
*      lv_filesize = xstrlen( iv_data ).
*      " 3) get the data
*      DATA:
*        ls_s3_request TYPE rcc_aws_put_object_inline_requ,
*        ls_s3_response TYPE rcc_aws_put_object_inline_resp,
*        lv_start_byte TYPE i,
*        lv_len TYPE i,
*        lv_flen TYPE f,
*        lv_byterange TYPE i.
*
*      CONSTANTS lc_max_bytes TYPE i VALUE 1048576.
*
*      ls_s3_request-awsaccess_key_id = iv_awskey.
*      ls_s3_request-bucket = iv_bucket.
*      ls_s3_request-key = iv_key.
*
*      " currently append is not supported
*      IF ( lv_filesize > lc_max_bytes ).
*        rv_result = abap_false.
*        RETURN.
*      ENDIF.
*
*      lv_flen = lv_filesize / lc_max_bytes.
*      lv_len = ceil( lv_flen ).
*      DO lv_len TIMES.
*        FREE ls_s3_response.
*        IF ( lv_len > 1 ).
*          lv_start_byte = ( sy-index - 1 ) * lc_max_bytes.
*          lv_byterange = lc_max_bytes - 1.
*          "ls_s3_request-byte_range_start = lv_start_byte.
*          "ls_s3_request-byte_range_end = lv_start_byte + lc_max_bytes - 1.
*          ls_s3_request-data = iv_data+lv_start_byte(lv_byterange).
*        ELSE.
*          ls_s3_request-data = iv_data.
*        ENDIF.
*        GET TIME STAMP FIELD lv_timestamp.
*        ls_s3_request-timestamp = lv_timestamp.
*        lv_stringtosign = `AmazonS3` && `PutObjectInline` && |{ lv_timestamp TIMESTAMP = ISO }| && `.000Z`.
*        ls_s3_request-signature = get_signature( iv_recordnumber = iv_recordnumber iv_stringtosign = lv_stringtosign ).
*        lo_s3_ws->put_object_inline(
*          EXPORTING
*            put_object_inline_request = ls_s3_request
*          IMPORTING
*            put_object_inline_response  = ls_s3_response
*        ).
*        IF ( ls_s3_response-put_object_inline_response-etag IS INITIAL ).
*          rv_result = abap_false.
*          RETURN.
*        ENDIF.
*      ENDDO.
    WHEN OTHERS.  " rest = default
      CONSTANTS lc_method TYPE string VALUE 'PUT'.
      DATA:
        lv_code TYPE csi_int,
        lv_reason TYPE csi_string,
        lv_data TYPE xstring,
        lv_region type csi_aws_region.
      lt_headers = it_additional_header.
      lv_region = get_bucket_region( iv_bucket ).
      GET TIME STAMP FIELD lv_timestamp.
      IF ( it_file_data IS SUPPLIED ).
        FIELD-SYMBOLS <ls_file_data> TYPE xstring.
        LOOP AT it_file_data ASSIGNING <ls_file_data>.
          lv_data = lv_data && <ls_file_data>.
        ENDLOOP.
      ENDIF.
      TRY.
        cl_csi_provider_aws_helper=>s3_do_rest_call(
          EXPORTING
            iv_uri              = iv_url
            iv_method           = lc_method
            iv_timestamp        = lv_timestamp
            iv_http_destination = get_provider( )->get_file_destination( )
            iv_data             = lv_data
            it_request_header_fields = lt_headers
            iv_content_type     = iv_content_type
            io_account          = get_account( )
            iv_bucket           = iv_bucket
            iv_region           = lv_region
            iv_raise_exception  = iv_raise_exception
          IMPORTING
            ev_code                   = lv_code
            ev_reason                 = lv_reason
            et_response_header_fields = lt_headers
        ).
        IF ( lv_code = mc_ok OR lv_code = mc_partial_content ).
          csiaw_header_get:
          mc_etag rv_id.
        ELSE.
          csiaw_mcx_raise_errorcode.
        ENDIF.
        csiaw_mcx_convert_exception.
      ENDTRY.
  ENDCASE.
  csiaw_mcx_raise.
ENDMETHOD.
ENDCLASS.
