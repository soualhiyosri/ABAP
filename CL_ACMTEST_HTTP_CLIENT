class CL_ACMTEST_HTTP_CLIENT definition
  public
  final
  create public .

public section.

  methods CREATE_CLIENT
    importing
      !IV_USERNAME type STRING
      !IV_PASSWORD type STRING optional
    exporting
      !EV_ERROR_MESSAGE type STRING .
  methods SEND_REQUEST
    importing
      !IS_TEST_REQUEST type CL_ACMTEST_HTTP_SERVER=>TY_TEST_REQUEST_S
      !IV_TIMEOUT_SECS type I
    exporting
      !EV_HTTP_CODE type I
      !EV_HTTP_REASON type STRING
      !EV_ERROR_MESSAGE type STRING
      !EV_RESPONSE_DATA type XSTRING
      !EV_TEST_DATA type STRING .
  methods CLOSE_CLIENT .
protected section.
private section.

  data MO_CLIENT type ref to IF_HTTP_CLIENT .
  constants CO_NODE_GUID type ICFNODGUID value '00O2TO38YKWPCOXUI7QEQRHPH' ##NO_TEXT.
  data MV_URL type STRING .

  methods CHECK_SERVICE_ACTIVE
    returning
      value(EV_ACTIVE) type ABAP_BOOL .
ENDCLASS.



CLASS CL_ACMTEST_HTTP_CLIENT IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method CL_ACMTEST_HTTP_CLIENT->CHECK_SERVICE_ACTIVE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] EV_ACTIVE                      TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_service_active.

    CALL FUNCTION 'HTTP_SERVICE_GET_STATUS'
      EXPORTING
        nodeguid = co_node_guid
*       URL      =
*       HOSTNAME = 'DEFAULT_HOST'
      IMPORTING
        active   = ev_active.
*     EXCEPTIONS
*       NOT_POSSIBLE_TO_GET_STATUS       = 1
*       OTHERS                           = 2

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method CL_ACMTEST_HTTP_CLIENT->CLOSE_CLIENT
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD close_client.

    IF mo_client IS NOT INITIAL.
      mo_client->close( ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method CL_ACMTEST_HTTP_CLIENT->CREATE_CLIENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_USERNAME                    TYPE        STRING
* | [--->] IV_PASSWORD                    TYPE        STRING(optional)
* | [<---] EV_ERROR_MESSAGE               TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_client.

    DATA:
      lv_url         TYPE string VALUE '/sap/bc/sec/acm_test',
      lv_username    TYPE string,
      lv_password    TYPE string,
      lv_protocol    TYPE string,
      lv_hostname    TYPE string,
      lv_port        TYPE string,
      ls_actlogin    TYPE icflogin,
      lv_pw_disabled TYPE n.

    CLEAR: ev_error_message.

*   Be sure that service /default_host/sap/bc/sec/acm_test is activated
    IF check_service_active( ) = abap_false.
      ev_error_message = 'ICF service for SACMSEL user switch (&1) is disabled'(001).
      REPLACE '&1' IN ev_error_message WITH lv_url.
      CONDENSE ev_error_message.
      RETURN.
    ENDIF.

*   Use http only because of kernel development systems
    CALL FUNCTION 'TH_GET_VIRT_HOST_DATA'
      EXPORTING
        protocol = 1 "th_plugin_protocol_http
        virt_idx = 0
      IMPORTING
        hostname = lv_hostname
        port     = lv_port
      EXCEPTIONS
        OTHERS   = 99 ##number_ok.
    IF sy-subrc IS INITIAL.
      lv_protocol = 'http' ##no_text.
    ELSE.
      ev_error_message = |Failed to get virtual host data from TH_GET_VIRT_HOST_DATA| ##no_text.
      RETURN.
    ENDIF.

    mv_url = lv_protocol && '://' && lv_hostname && ':' && lv_port && lv_url && `?sap-client=` && sy-mandt ##no_text.

    cl_http_client=>create_by_url(
      EXPORTING
        url    = mv_url
        ssl_id = 'ANONYM'        "no X.509 client certificate
      IMPORTING
        client = mo_client
        EXCEPTIONS
          argument_not_found = 1
          plugin_not_active  = 2
          internal_error     = 3
    ).
    IF sy-subrc <> 0.
      ev_error_message = |Failed to create HTTP service URL| ##no_text.
      RETURN.
    ENDIF.

*   Enable "Terminal ID" debugging (Activate by "/htid" in SAPgui where request is sent)
    mo_client->propertytype_send_sap_passport = if_http_client=>co_enabled.

*   Check if basic authentication is possible
    CALL 'C_SAPGPARAM' ID 'NAME'  FIELD 'login/disable_password_logon'
                       ID 'VALUE' FIELD lv_pw_disabled.   "#EC CI_CCALL
    IF lv_pw_disabled <> '0'.
      ev_error_message = 'System does not allow password logon'(002).
      REPLACE '&1' IN ev_error_message WITH lv_url.
      CONDENSE ev_error_message.
      RETURN.
    ENDIF.

*   Supress Logon Popup
    mo_client->propertytype_logon_popup = 0.

    lv_password = iv_password.
    IF lv_password IS INITIAL.
*     Create the test user with random password
      TRY.
          cl_acmtest_helper=>create_test_user(
            EXPORTING
              iv_username = CONV #( iv_username )
            IMPORTING
              ev_password = lv_password
          ).
        CATCH cx_acmtst INTO DATA(lrx_acmtst).
          ev_error_message = lrx_acmtst->get_text( ).
          RETURN.
      ENDTRY.
    ENDIF.

    lv_username  = iv_username.

    CALL FUNCTION 'HTTP_GET_HANDLER_LIST'
      EXPORTING
        url                 = lv_url
*       HOSTNUMBER          = 0
*       ENABLE_STATISTIC    = 0
*       SHM_PARAM           =
      IMPORTING
        actlogin            = ls_actlogin
      EXCEPTIONS
        no_virtual_host     = 1
        host_inactive       = 2
        empty_url           = 3
        empty_url_component = 4
        wrong_url           = 5
        url_no_handler      = 6
        service_inactive    = 7
        cyclic_alias_error  = 8
        broken_alias_error  = 9
        OTHERS              = 10.
    IF sy-subrc <> 0.
      ev_error_message = |Failed to get ICF service properties| ##no_text.
      RETURN.
    ENDIF.

    IF ls_actlogin-aliaslogin = abap_true.
      DATA:
          lv_user_name TYPE usr02-bname,
          lv_alias     TYPE bapialias.
        lv_user_name = iv_username.
        CALL FUNCTION 'SUSR_USER_ALIAS_GET'
          EXPORTING
            user_name           = lv_user_name
          IMPORTING
            alias               = lv_alias
          EXCEPTIONS
            user_name_not_exist = 1
            OTHERS              = 2.
      IF sy-subrc <> 0 OR lv_alias IS INITIAL.
        ev_error_message = 'ICF service for SACMSEL user switch (&1) requires alias logon, but alias for user &2 cannot be found'(003).
        REPLACE '&1' IN ev_error_message WITH lv_url.
        REPLACE '&2' IN ev_error_message WITH lv_user_name.
        CONDENSE ev_error_message.
          RETURN.
        ENDIF.
        lv_username = lv_alias.
    ENDIF.

    mo_client->authenticate(
      username  = lv_username
      password  = lv_password
    ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method CL_ACMTEST_HTTP_CLIENT->SEND_REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] IS_TEST_REQUEST                TYPE        CL_ACMTEST_HTTP_SERVER=>TY_TEST_REQUEST_S
* | [--->] IV_TIMEOUT_SECS                TYPE        I
* | [<---] EV_HTTP_CODE                   TYPE        I
* | [<---] EV_HTTP_REASON                 TYPE        STRING
* | [<---] EV_ERROR_MESSAGE               TYPE        STRING
* | [<---] EV_RESPONSE_DATA               TYPE        XSTRING
* | [<---] EV_TEST_DATA                   TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD send_request.

    DATA:
      ls_test_request   TYPE cl_acmtest_http_server=>ty_test_request_s,
      lv_xml_request    TYPE xstring,
      lv_xml_request_id TYPE xstring.

    CLEAR: ev_http_code, ev_http_reason, ev_error_message, ev_response_data, ev_test_data.

    ASSERT mo_client IS BOUND.

*-----------------------------------------------------------------------------
*   Add a random ID to the request to secure communication
    ls_test_request = is_test_request.
    DESCRIBE FIELD ls_test_request-request_id LENGTH DATA(lv_len) IN BYTE MODE.
    cl_acm_common=>get_random(
      EXPORTING
        iv_length         = lv_len
      IMPORTING
        ev_random_xstring = lv_xml_request_id
    ).
    ls_test_request-request_id = lv_xml_request_id.

    EXPORT token = ls_test_request-request_id TO SHARED BUFFER indx(ac) ID  cl_acmtest_http_server=>co_indx_id.



*   XML transformation of the request
    TRY.
        CALL TRANSFORMATION id
            SOURCE request = ls_test_request
            RESULT XML       lv_xml_request.
      CATCH cx_transformation_error INTO DATA(lrx_transformation_error).
        ev_error_message = lrx_transformation_error->get_text( ).
        RETURN.
    ENDTRY.

*-------------------------------------------------------------------------------

*   Set request protocol
    mo_client->request->set_header_field(
        name  = if_http_header_fields_sap=>server_protocol
        value = 'HTTP/1.1'
    ) ##no_text.
*   Set message to send
    mo_client->request->set_data( lv_xml_request ).
    mo_client->request->set_content_type( 'text/xml' ) ##no_text.

*   Send request
    mo_client->send(
      EXPORTING
        timeout                    = iv_timeout_secs
      EXCEPTIONS
        http_communication_failure =  1
        http_invalid_state         =  2
        http_processing_failed     =  3
        OTHERS                     = 99
    ) ##number_ok.
    IF sy-subrc <> 0.
      CALL METHOD mo_client->get_last_error
        IMPORTING
          message = DATA(lv_error_message)
          code    = DATA(lv_code).
      ev_error_message = 'Failed to send request to "&1": &3 (ICF code &2)'(004).
      DATA(lv_code_string) = |{ lv_code }|.
      REPLACE '&1' WITH mv_url           INTO ev_error_message.
      REPLACE '&2' WITH lv_code_string   INTO ev_error_message.
      REPLACE '&3' WITH lv_error_message INTO ev_error_message.
      CONDENSE ev_error_message.
      RETURN.
    ENDIF.

*========================================================================

*   Receive message from server
    mo_client->receive(
      EXCEPTIONS
        http_communication_failure =  1
        http_invalid_state         =  2
        http_processing_failed     =  3
        OTHERS                     = 99
    ) ##number_ok.
    IF sy-subrc <> 0.
      CALL METHOD mo_client->get_last_error
        IMPORTING
          message = lv_error_message
          code    = lv_code.
      ev_error_message = 'Failed to receive response from "&1": &3 (ICF code &2)'(005).
      lv_code_string = |{ lv_code }|.
      REPLACE '&1' WITH mv_url           INTO ev_error_message.
      REPLACE '&2' WITH lv_code_string   INTO ev_error_message.
      REPLACE '&3' WITH lv_error_message INTO ev_error_message.
      CONDENSE ev_error_message.
      RETURN.
    ENDIF.

    mo_client->response->get_status(
      IMPORTING
        code   = ev_http_code
        reason = ev_http_reason
    ).
    IF ev_http_code <> 0 AND
       ev_http_code <> 200 ##number_ok.
      ev_error_message = 'Response from "&1": &3 (HTTP &2)'(006).
      lv_code_string = |{ ev_http_code }|.
      REPLACE '&1' WITH mv_url         INTO ev_error_message.
      REPLACE '&2' WITH lv_code_string INTO ev_error_message.
      REPLACE '&3' WITH ev_http_reason INTO ev_error_message.
      CONDENSE ev_error_message.
      RETURN.
    ENDIF.

*   Get possible Test response
    ev_test_data = mo_client->response->get_cdata( ).
*   Get XML data
    ev_response_data = mo_client->response->get_data( ).

  ENDMETHOD.
ENDCLASS.
