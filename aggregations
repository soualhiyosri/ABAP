*&---------------------------------------------------------------------*
*& Report  Z_ELK_TRUEAGGS
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT Z_ELK_TRUEAGGS.

    TYPES: BEGIN OF LS_SERIES_ROW,
             KEY       TYPE STRING,
             DOC_COUNT TYPE I,
           END OF LS_SERIES_ROW.

*    DATA LT_XY TYPE TABLE OF ZXYTABLE.
    data ZXYTABLE2  TYPE STANDARD TABLE OF ZXYTABLE.
    DATA LS_SERIES TYPE ZXYTABLE.
  .


    DATA LS_SERIES2 TYPE LS_SERIES_ROW.

*DATA lt_series TYPE LT_XY .

    DATA:  HTTP_CLIENT TYPE REF TO IF_HTTP_CLIENT,

           HTTP_URL    TYPE STRING,
           P_CONTENT   TYPE STRING,
           LT2_FLIGHT  TYPE STANDARD TABLE OF SFLIGHT.
    DATA : GV_JSON TYPE STRING.
    DATA LV_PAYLOAD TYPE STRING.
    DATA LV_PAYLOAD1 TYPE STRING.
    DATA LV_PAYLODA2 TYPE STRING.
    DATA LV_PAY3 TYPE STRING.
    DATA HELLOWORLD TYPE STRING.
    DATA UV_PAYLOAD TYPE STRING.
    DATA GV_CODE TYPE INTEGER.
    DATA GV_REASON TYPE STRING.


DATA  index TYPE string VALUE 'f_log11'.
DATA  _type TYPE string VALUE 'focus_log11' .


DATA lv_payloadd TYPE string.
DATA DIMENSION TYPE string.
DATA lv_payloadd2 TYPE string.
DATA lv_payloadd1 TYPE string.

DATA AGGREGATION TYPE string.
DATA lv_payloadd4 TYPE string.

DATA MEASURE TYPE string.
DATA lv_payloadd6 TYPE string.
DATA lv_payloadd3 TYPE string.
DATA lv_payloadd8 TYPE string.
DATA lv_payloadd7 TYPE string.
DATA lv_payloadd5 TYPE string.
DATA helloworldd TYPE string.
            DATA COP TYPE I.
            COP = 0.
            DATA IND TYPE I.
            IND = 0.

  types:
    BEGIN OF TS_DIMENSION_ROW,
             KEY   TYPE STRING,
             VALUE TYPE    TABLE OF STRING  WITH NON-UNIQUE DEFAULT KEY,
           END OF TS_DIMENSION_ROW .
  types:
    TT_DIMENSION_ROW TYPE TABLE OF TS_DIMENSION_ROW .
  DATA IT_DIMENSION TYPE  TT_DIMENSION_ROW.
data: LV_S type string.
DATA LSZ_SERIES TYPE TS_DIMENSION_ROW.
DATA LTZ_SERIES TYPE TABLE OF TS_DIMENSION_ROW.

DATA LT2_FILTERS TYPE TABLE OF STRING.
data: LV_RANGE_VALUES type string.
data: lcnt_bunit type I.
LV_RANGE_VALUES = 'atom,xml,size'.

SPLIT LV_RANGE_VALUES AT ',' INTO TABLE LT2_FILTERS.




      LSZ_SERIES-KEY = 'TECH_SERV_name' .
      LSZ_SERIES-VALUE = LT2_FILTERS.
      APPEND LSZ_SERIES TO  LTZ_SERIES.

lv_payloadd = '{ "aggs": { "2": { "date_histogram": { "field": "TIMESTAMP", "interval": "1d", "time_zone": "Africa/Lagos", "min_doc_count": 1 }, "aggs": { "1": { "sum": { "field": "XML_SIZE" } } } } }, "size": 0, "_source": { "excludes": [] },'.
lv_payloadd1 = '"stored_fields": [ "*" ], "script_fields": {}, "docvalue_fields": [ "TIMESTAMP" ], "query": { "bool": { "must": ['.
BREAK-POINT.

LOOP AT   LTZ_SERIES into  DATA(LSP_SERIERS).
READ TABLE    LTZ_SERIES INTO DATA(LSV_SERIERS)  WITH TABLE KEY KEY = LSP_SERIERS-KEY.
BREAK-POINT.
DESCRIBE TABLE LSP_SERIERS-VALUE LINES lcnt_bunit.
WRITE :/ lcnt_bunit.
LOOP AT LSP_SERIERS-VALUE INTO LV_S .
  IND = IND + 1.
lv_payloadd2 ='{ "bool": { "should": [ { "term": { "' && LSP_SERIERS-KEY && '.keyword": "' && LV_S && '" } },'.
IF IND = lcnt_bunit.
lv_payloadd3 ='{ "term": { "' && LSP_SERIERS-KEY && '.keyword": "' && LV_S && '" } }], "minimum_should_match": 1 } },'.
ENDIF.
WRITE :/ LV_S.
BREAK-POINT.
ENDLOOP.
endloop.

lv_payloadd2 ='{ "bool": { "should": [ { "term": { "' && LSP_SERIERS-KEY && '.keyword": "' && LV_S && '" } },'.

lv_payloadd8 = '], "minimum_should_match": 1 } },'.
lv_payloadd3 = ' { "bool": { "should": [ { "term": { "ENTITY_DEPTH.keyword": "FolderInstanceSet" } }, { "term": { "ENTITY_DEPTH.keyword": "PersContainerItems" } }], "minimum_should_match": 1 } },'.

lv_payloadd4 = '{ "range": { "TIMESTAMP": { "from": "2019-04-12", "to": "2019-04-25" } } } '.
lv_payloadd5 ='], "filter": [], "should": [], "must_not": [] } } }'.


BREAK-POINT.
helloworldd = lv_payloadd && lv_payloadd1 && lv_payloadd2  && lv_payloadd3 && lv_payloadd4 && lv_payloadd5 .
BREAK-POINT.

*ENDIF.
    DATA: GV_REQUEST TYPE REF TO IF_HTTP_REQUEST.
    DATA: GV_RESPONSE TYPE REF TO IF_HTTP_RESPONSE.
    DATA: LO_HTTP_CLIENT    TYPE REF TO IF_HTTP_CLIENT.
    DATA: LV_HTTP_ERROR_DESCR      TYPE STRING,
          LV_HTTP_ERROR_DESCR_LONG TYPE XSTRING.
    DATA: LV_HTTP_RETURN_CODE  TYPE I.




    DATA: HTTP_DEST TYPE RFCDEST VALUE 'ZTEST_HTTP'.
    CL_HTTP_CLIENT=>CREATE_BY_DESTINATION( EXPORTING
    DESTINATION = HTTP_DEST IMPORTING CLIENT = LO_HTTP_CLIENT ).



*TRANSLATE index TO LOWER CASE.
*TRANSLATE _type TO LOWER CASE.
    CALL METHOD CL_HTTP_UTILITY=>SET_REQUEST_URI
      EXPORTING
        REQUEST = LO_HTTP_CLIENT->REQUEST
        URI     = |/{ INDEX }/_search|.

*

* Creation of new IF_HTTP_Client object
*  CALL METHOD cl_http_client=>create_by_url
*    EXPORTING
*      url                = 'http://192.168.130.198:9200/f_log11/focus_log11/_search'
*    IMPORTING
*      client             = http_client
*    EXCEPTIONS
*      argument_not_found = 1
*      plugin_not_active  = 2
*      internal_error     = 3
*      OTHERS             = 4.


* Set up the HTTP Post
    CALL METHOD LO_HTTP_CLIENT->REQUEST->SET_METHOD
      EXPORTING
        METHOD = 'POST'.

    CALL METHOD LO_HTTP_CLIENT->REQUEST->SET_VERSION
      EXPORTING
        VERSION = IF_HTTP_REQUEST=>CO_PROTOCOL_VERSION_1_0.   " 1.0


    LO_HTTP_CLIENT->REQUEST->SET_HEADER_FIELD(
        NAME = 'Content-Type'
        VALUE = 'application/json'
        ).

    CALL METHOD LO_HTTP_CLIENT->REQUEST->IF_HTTP_ENTITY~SET_CDATA
      EXPORTING
        DATA   = HELLOWORLDD
        OFFSET = 0.

* Send the HTTP Post
    CALL METHOD LO_HTTP_CLIENT->SEND
      EXPORTING
        TIMEOUT                    = 15   " 15 Seconds
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2.


*Read the Response
    CALL METHOD LO_HTTP_CLIENT->RECEIVE
      EXCEPTIONS
        HTTP_COMMUNICATION_FAILURE = 1
        HTTP_INVALID_STATE         = 2
        HTTP_PROCESSING_FAILED     = 3.

* Get the HTTP return code from the HTTP POST:
    LO_HTTP_CLIENT->RESPONSE->GET_STATUS( IMPORTING CODE   = LV_HTTP_RETURN_CODE ).
    LO_HTTP_CLIENT->RESPONSE->GET_STATUS( IMPORTING REASON = LV_HTTP_ERROR_DESCR ).

    LV_HTTP_ERROR_DESCR_LONG = LO_HTTP_CLIENT->RESPONSE->GET_RAW_MESSAGE( ).
* Write the HTTP Return Code / Description to the screen:
    WRITE:/ 'HTTP return Code/Description:',  LV_HTTP_RETURN_CODE NO-GAP, '/' NO-GAP, LV_HTTP_ERROR_DESCR.
    SKIP 1.
*WRITE:/ 'HTTP return Code/Long Description:',  lv_http_return_code NO-GAP, '/' NO-GAP, lv_http_error_descr_long.
    SKIP 1.

* Refresh the Request after each POST:
    CALL METHOD LO_HTTP_CLIENT->REFRESH_REQUEST(
      EXCEPTIONS
        HTTP_ACTION_FAILED = 1
        OTHERS             = 2 ).

* Write the data received back from the POST to the screen:
    CLEAR  P_CONTENT.
    P_CONTENT = LO_HTTP_CLIENT->RESPONSE->GET_CDATA( ).

*************************************************
    DATA: LV_JSON  TYPE Z_TEST_UI2=>JSON,
          LR2_DATA TYPE REF TO DATA,
          LR_DATA  TYPE REF TO DATA.


    FIELD-SYMBOLS:
      <DATA>    TYPE DATA,
      <STRUCT>  TYPE ANY,
      <FIELD>   TYPE ANY,
      <GT_DATA> TYPE TABLE.


    LR_DATA = /UI2/CL_JSON=>GENERATE( JSON = P_CONTENT ).

    " OK, generated, now let us access somete field :(
    IF LR_DATA IS BOUND.
      ASSIGN LR_DATA->* TO <DATA>.
      ASSIGN COMPONENT `AGGREGATIONS` OF STRUCTURE <DATA> TO <FIELD>.
      IF <FIELD> IS ASSIGNED.
        LR_DATA = <FIELD>.

        ASSIGN LR_DATA->* TO <DATA>.
        ASSIGN COMPONENT `2` OF STRUCTURE <DATA> TO <FIELD>.
        IF <FIELD> IS ASSIGNED.
          LR_DATA = <FIELD>.
          ASSIGN LR_DATA->* TO <DATA>.

          ASSIGN COMPONENT `BUCKETS` OF STRUCTURE <DATA> TO <FIELD>.
          BREAK-POINT.
          IF <FIELD> IS ASSIGNED.
            LR_DATA = <FIELD>.
            ASSIGN LR_DATA->* TO <GT_DATA>.


            LOOP AT <GT_DATA> ASSIGNING <DATA>.
              LR_DATA = <DATA>.
              FIELD-SYMBOLS: <FIELD1> TYPE DATA,<FIELD2> TYPE DATA,
                             <STR>    TYPE DATA.
              FIELD-SYMBOLS: <LV1_STRING> TYPE STRING,<LV2_STRING> TYPE I,<FS_M> TYPE LS_SERIES_ROW .

              ASSIGN <DATA>->* TO <STR>.


              ASSIGN COMPONENT 'KEY' OF STRUCTURE <STR> TO  <FIELD1>.
              ASSIGN <FIELD1>->* TO <LV1_STRING>.
              ASSIGN COMPONENT 'DOC_COUNT' OF STRUCTURE <STR> TO  <FIELD2>.
              ASSIGN <FIELD2>->* TO <LV2_STRING>.
*            WRITE: / <lv1_string>.
*            WRITE: / <lv2_string>.
              LS_SERIES-X = <LV1_STRING>.
              WRITE: / <LV1_STRING>.
              LS_SERIES-Y = <LV2_STRING>.
              WRITE: / <LV2_STRING>.
               COP =  COP + 1.
               LS_SERIES-ID = COP.


              INSERT INTO ZXYTABLE VALUES LS_SERIES.

DATA: series2 TYPE REF TO ZXYTABLE.
DATA: series3 TYPE TABLE OF ZXYTABLE.
BREAK-POINT.


select * from ZXYTABLE into TABLE series3.



*              APPEND LINES OF ZXYTABLE2 TO ZXYTABLE.
*              LOOP at ZXYTABLE2 INto LS_SERIES3.

*MOVE-CORRESPONDING LS_SERIES3 TO LS_SERIES4.
*INSERT LS_SERIES2 INTO ZXYTABLE.
*INSERT INTO ZXYTABLE VALUES LS_SERIES4.
*ENDLOOP.


            ENDLOOP.

*        LOOP AT LT_XY ASSIGNING <fs_m>.
*         write: / ls_series-key , ls_series-doc_count.
*          ENDLOOP.
            " We got it -> Value1
          ENDIF.
        ENDIF.
        BREAK-POINT.
      ENDIF.
      delete from ZXYTABLE.
    ENDIF.
